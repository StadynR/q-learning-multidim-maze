int A[files][columns] = {
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1},
    {-1,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1},
    {0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1},
    {0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1},
    {-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1},
    {0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,-1},
    {0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1},
    {0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1},
    {0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1},
    {0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1},
    {0,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,-1,-1,0,-1},
    {0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1},
    {0,-1,-1,-1,0,-1,-1,0,-1,-1,-1,0,-1,-1,0,-1},
    {0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};

int B[files][columns] =  {
{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1} ,
{ 0, -1,  0, -1,  0, -1, -1, -1,  0, -1, -1, -1,  0, -1,  0, -1} ,
{ 0, -1,  0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1} ,
{ 0,  0,  0, -1,  0, -1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1} ,
{ 0, -1,  0, -1,  0,  0,  0, -1,  0,  0,  0,  0,  0, -1,  0, -1} ,
{-1, -1,  0, -1,  0, -1,  0, -1,  0, -1, -1, -1,  0, -1,  0, -1} ,
{ 0,  0,  0,  0,  0, -1,  0, -1,  0, -1,  0, -1,  0, -1,  0, -1} ,
{ 0, -1, -1, -1, -1, -1,  0, -1,  0, -1,  0, -1,  0, -1,  0, -1} ,
{ 0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -1,  0, -1,  0, -1} ,
{ 0, -1, -1, -1,  0, -1,  0, -1, -1, -1,  0, -1,  0, -1,  0, -1} ,
{ 0, -1,  0,  0,  0, -1,  0, -1,  0,  0,  0, -1,  0, -1, -1, -1} ,
{ 0, -1,  0, -1,  0, -1,  0, -1,  0, -1, -1, -1,  0, -1,  0, -1} ,
{ 0, -1,  0, -1,  0, -1,  0,  0,  0, -1,  0, -1,  0, -1,  0, -1} ,
{ 0, -1, -1, -1,  0, -1, -1, -1,  0, -1,  0, -1,  0, -1,  0, -1} ,
{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0, -1} ,
{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1} ,
    };

int D[files][columns] =  {
{-1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1} ,
{0,   -1,  0,   0,  0,   -1,  0,   -1,  0,   -1,  -1,   -1,  0,   -1,  0,   -1} ,
{0,   0,  0,   -1,  0,   0,   0,   0,   0,   0,  0,   -1,  0,   0,   0,   -1} ,
{-1,   -1,  0,   -1,  -1,  -1,  -1,  -1,  0,   -1,  -1,  -1,  -1,  -1,  0,   -1} ,
{0,    0,   0,   -1,  0,   0,   0,   -1,  0,   0,   0,   0,   0,   -1,  0,   -1} ,
{0,    -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1,  -1,  -1,  0,   -1,  0,   -1} ,
{0,    -1,  0,   0,   0,   -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1} ,
{0,    -1,  -1,  -1,  -1,  -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1} ,
{0,     0,   0,   0,   0,   -1,  0,   0,   0,   0,   0,   0,  0,   -1,  0,   -1} ,
{-1,   -1,  0,   -1,    0,  -1,  -1,  -1,  -1,  -1,  0,   -1,  0,   -1,  0,  -1} ,
{0,    0,   0,   -1,  0,   -1,  0,   0,   0,   -1,  0,   -1,  0,   0,   0,   -1} ,
{0,   -1,  -1,  -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1,  -1,  -1,  -1,  -1} ,
{0,   -1,  0,   0,   0,   -1,  0,   0,   0,   -1,  0,   -1,  0,   0,   0,   -1} ,
{0,   -1,  -1,  -1,  0,   -1,  0,   -1,  0,   -1,  0,   -1,  -1,  -1,  0,   -1} ,
{0,    0,   0,   0,   0,   0,   0,   -1,  0,   0,   0,   0,   0,   0,   0,   -1} ,
{-1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1} ,

    };

void maze_1(void){
   int i,j,k;
   for (j=0; j<files;j++)
    for (i=0; i<columns; i++)
    {
     R[j][i]=A[j][i]; 
    }    
}

//-------------------------------------------------------
 
void maze_2(void){
   int i,j,k;
   for (j=0; j<files;j++)
    for (i=0; i<columns; i++)
    {
     R[j][i]=B[j][i]; 
    }    
}

//-------------------------------------------------------
 
void maze_3(void){
   int i,j,k;
   for (j=0; j<files;j++)
    for (i=0; i<columns; i++)
    {
     R[j][i]=D[j][i]; 
    }    
}

//-------------------------------------------------------
 
//void random_chees(void){
//    int i, j;

//    for (j=0; j<files;j++) //Remove the current chees
//        for (i=0; i<columns; i++)
//        {
//            if(R[j][i]==100)R[j][i]=0; 
//        }    

//    do{
//        file_cheese = random(files);
//        column_cheese = random(columns); 

//        if(R[file_cheese][column_cheese]==0){ //new chees
//            R[file_cheese][column_cheese] = 100;   
//            //captured_chees++;
//        }
//    }while(R[file_cheese][column_cheese]<0);
    
//} 
//-------------------------------------------------------

void init_R(void)
{
   int k;
   k = random(3);

   if (k == 0) maze_1();
   else if( k == 1) maze_2();
   else maze_3();
   
   
   //random_chees();
}


